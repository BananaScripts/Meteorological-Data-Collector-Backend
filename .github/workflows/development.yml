name: CI development

on:
  push:
    branches:
      - development
      - Fix/*
      - Feat/*
      - fix/*
      - feat/*
  pull_request:
    branches:
      - main

jobs:
  Backend:
    runs-on: ubuntu-latest

    #Build
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configurar Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Instalar Dependências
      run: npm install      
    
    #Inciar Banco de Dados
    - name: Iniciar Submodulo
      run: |
        cd db
        git submodule init
        git submodule update
        
    - name: Mudar para branch Development no submodulo de BD
      run: |
        cd db
        git checkout Development
    
    #Definindo Variáveis de Ambiente
    - name: Criar .env
      run: |
        echo 'DIRECT_URL="postgresql://postgres.otkrzedzgbwgywqjrgwq:codeApiSeth%2301@aws-0-us-west-1.pooler.supabase.com:6543/postgres?pgbouncer=true"' >> .env
        echo 'DATABASE_URL="postgresql://postgres.otkrzedzgbwgywqjrgwq:codeApiSeth%2301@aws-0-us-west-1.pooler.supabase.com:6543/postgres?pgbouncer=true"' >> .env
    
    #Inciado Servidor
    - name: Iniciar Servidor
      run: |
          npm run dev & 
          echo $! > server_pid.txt
    
    # Rodar Testes
    - name: Rodar Testes
      run: |
        # Extração  do nome da branch
        BRANCH_NAME=${GITHUB_REF#refs/heads/}

        echo "Nome da branch: $BRANCH_NAME"

        # Rodando testes de integração para PRs entre 'development' e 'main'
        if [[ "$GITHUB_BASE_REF" == "main" && "$GITHUB_HEAD_REF" == "development" ]]; then
          echo "Rodando testes de integração da branch development para main"
          npm test -- src/__tests__/integration

        # Rodando testes para a branch 'development' (mas não deve rodar em PR)
        elif [[ "$BRANCH_NAME" == "development" ]]; then
          echo "Rodando testes para branch development"
          npm test -- src/__tests__/unit

        # Rodando testes para branches 'Fix/*' ou 'Feat/*'
        elif [[ "$BRANCH_NAME" == Feat/* ]] || [[ "$BRANCH_NAME" == Fix/* ]] || [[ "$BRANCH_NAME" == feat/* ]] || [[ "$BRANCH_NAME" == fix/* ]]; then
          FEATURE_TEST_DIR="src/__tests__/unit/tasks/${BRANCH_NAME//\//-}"
          echo "Verificando se os testes existem em: $FEATURE_TEST_DIR"
          
          # Verifica se o diretório de testes da feature existe
          if [ -d "$FEATURE_TEST_DIR" ]; then
            echo "Rodando testes para a branch $BRANCH_NAME em $FEATURE_TEST_DIR"
            npm test -- $FEATURE_TEST_DIR
          else
            echo "Nenhum teste foi encontrado para $BRANCH_NAME. Finalizando."
            exit 1
          fi
        fi

    
    #Encerrando Servidor
    - name: Encerrar servidor
      run: kill $(cat server_pid.txt)

  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Autenticar com o Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configurar Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Verificar a autenticação
      run: |
        gcloud auth list
        gcloud config list

    - name: Build e Push da Imagem Docker do App para o Artifact Registry
      run: |
        # Definir variáveis do caminho completo da imagem
        REGION=southamerica-east1
        PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
        REPOSITORY=meteorological-data-collector
        IMAGE_NAME_APP=meteorological-data-collector-app
        FULL_IMAGE_PATH_APP=$REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_NAME_APP

        # Configurar o Docker para autenticar com o Artifact Registry
        gcloud auth configure-docker $REGION-docker.pkg.dev --quiet

        # Buildar a imagem Docker do App
        docker build -t $FULL_IMAGE_PATH_APP:latest -f Dockerfile.app .

        # Push da imagem do App para o Artifact Registry
        docker push $FULL_IMAGE_PATH_APP:latest

    - name: Build e Push da Imagem Docker do Server para o Artifact Registry
      run: |
        # Definir variáveis do caminho completo da imagem
        REGION=southamerica-east1
        PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
        REPOSITORY=meteorological-data-collector
        IMAGE_NAME_SERVER=meteorological-data-collector-server
        FULL_IMAGE_PATH_SERVER=$REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_NAME_SERVER

        # Buildar a imagem Docker do Server
        docker build -t $FULL_IMAGE_PATH_SERVER:latest -f Dockerfile.server .

        # Push da imagem do Server para o Artifact Registry
        docker push $FULL_IMAGE_PATH_SERVER:latest

    - name: Verificar as Imagens Docker no Artifact Registry
      run: |
        IMAGE_PATH_APP=southamerica-east1-docker.pkg.dev/meteorological-data-collector/meteorological-data-collector/meteorological-data-collector-app
        IMAGE_PATH_SERVER=southamerica-east1-docker.pkg.dev/meteorological-data-collector/meteorological-data-collector/meteorological-data-collector-server

        echo "Verificando se a imagem Docker do App foi empurrada corretamente para o Artifact Registry"
        echo "Verificando se a imagem Docker do Server foi empurrada corretamente para o Artifact Registry"

    - name: Deploy no Cloud Run
      run: |
        REGION=southamerica-east1
        IMAGE_PATH=southamerica-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/meteorological-data-collector/meteorological-data-collector-app

        gcloud run deploy metereological-data-collector \
          --image $IMAGE_PATH:latest \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --timeout 600
    
    - name: Deploy no Cloud Run
      run: |
        REGION=southamerica-east1
        IMAGE_PATH=southamerica-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/meteorological-data-collector/meteorological-data-collector-app
    
        gcloud run deploy metereological-data-collector 
          --image $IMAGE_PATH:latest \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --timeout 600
